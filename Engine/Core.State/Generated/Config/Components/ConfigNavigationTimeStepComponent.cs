//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity navigationTimeStepEntity { get { return GetGroup(ConfigMatcher.NavigationTimeStep).GetSingleEntity(); } }
    public Lockstep.Core.State.Config.NavigationTimeStepComponent navigationTimeStep { get { return navigationTimeStepEntity.navigationTimeStep; } }
    public bool hasNavigationTimeStep { get { return navigationTimeStepEntity != null; } }

    public ConfigEntity SetNavigationTimeStep(FixMath.NET.Fix64 newValue) {
        if (hasNavigationTimeStep) {
            throw new Entitas.EntitasException("Could not set NavigationTimeStep!\n" + this + " already has an entity with Lockstep.Core.State.Config.NavigationTimeStepComponent!",
                "You should check if the context already has a navigationTimeStepEntity before setting it or use context.ReplaceNavigationTimeStep().");
        }
        var entity = CreateEntity();
        entity.AddNavigationTimeStep(newValue);
        return entity;
    }

    public void ReplaceNavigationTimeStep(FixMath.NET.Fix64 newValue) {
        var entity = navigationTimeStepEntity;
        if (entity == null) {
            entity = SetNavigationTimeStep(newValue);
        } else {
            entity.ReplaceNavigationTimeStep(newValue);
        }
    }

    public void RemoveNavigationTimeStep() {
        navigationTimeStepEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public Lockstep.Core.State.Config.NavigationTimeStepComponent navigationTimeStep { get { return (Lockstep.Core.State.Config.NavigationTimeStepComponent)GetComponent(ConfigComponentsLookup.NavigationTimeStep); } }
    public bool hasNavigationTimeStep { get { return HasComponent(ConfigComponentsLookup.NavigationTimeStep); } }

    public void AddNavigationTimeStep(FixMath.NET.Fix64 newValue) {
        var index = ConfigComponentsLookup.NavigationTimeStep;
        var component = (Lockstep.Core.State.Config.NavigationTimeStepComponent)CreateComponent(index, typeof(Lockstep.Core.State.Config.NavigationTimeStepComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceNavigationTimeStep(FixMath.NET.Fix64 newValue) {
        var index = ConfigComponentsLookup.NavigationTimeStep;
        var component = (Lockstep.Core.State.Config.NavigationTimeStepComponent)CreateComponent(index, typeof(Lockstep.Core.State.Config.NavigationTimeStepComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveNavigationTimeStep() {
        RemoveComponent(ConfigComponentsLookup.NavigationTimeStep);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherNavigationTimeStep;

    public static Entitas.IMatcher<ConfigEntity> NavigationTimeStep {
        get {
            if (_matcherNavigationTimeStep == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.NavigationTimeStep);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherNavigationTimeStep = matcher;
            }

            return _matcherNavigationTimeStep;
        }
    }
}
